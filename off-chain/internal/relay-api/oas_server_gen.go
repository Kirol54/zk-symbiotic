// Code generated by ogen, DO NOT EDIT.

package relay_api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// GetAggregationProofGet implements GET /getAggregationProof operation.
	//
	// Get aggregation proof.
	//
	// GET /getAggregationProof
	GetAggregationProofGet(ctx context.Context, params GetAggregationProofGetParams) (*AggregationProof, error)
	// GetAggregationStatusGet implements GET /getAggregationStatus operation.
	//
	// Get aggregation status, can be sent only to aggregator nodes.
	//
	// GET /getAggregationStatus
	GetAggregationStatusGet(ctx context.Context, params GetAggregationStatusGetParams) (*AggregationStatus, error)
	// GetCurrentEpochGet implements GET /getCurrentEpoch operation.
	//
	// Get current epoch.
	//
	// GET /getCurrentEpoch
	GetCurrentEpochGet(ctx context.Context) (*GetCurrentEpochGetOK, error)
	// GetSignatureRequestGet implements GET /getSignatureRequest operation.
	//
	// Get signature request by request hash.
	//
	// GET /getSignatureRequest
	GetSignatureRequestGet(ctx context.Context, params GetSignatureRequestGetParams) (*SignatureRequest, error)
	// GetSignaturesGet implements GET /getSignatures operation.
	//
	// Get signature by request hash.
	//
	// GET /getSignatures
	GetSignaturesGet(ctx context.Context, params GetSignaturesGetParams) ([]Signature, error)
	// GetSuggestedEpochGet implements GET /getSuggestedEpoch operation.
	//
	// Get suggested epoch to request sign.
	//
	// GET /getSuggestedEpoch
	GetSuggestedEpochGet(ctx context.Context) (*GetSuggestedEpochGetOK, error)
	// GetValidatorSetGet implements GET /getValidatorSet operation.
	//
	// Get current validator set.
	//
	// GET /getValidatorSet
	GetValidatorSetGet(ctx context.Context, params GetValidatorSetGetParams) (*ValidatorSet, error)
	// SignMessagePost implements POST /signMessage operation.
	//
	// Sign a message.
	//
	// POST /signMessage
	SignMessagePost(ctx context.Context, req *SignMessagePostReq) (*SignMessagePostOK, error)
	// NewError creates *ErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
