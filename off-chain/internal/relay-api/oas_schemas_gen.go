// Code generated by ogen, DO NOT EDIT.

package relay_api

import (
	"fmt"
	"time"

	"github.com/go-faster/errors"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Ref: #/components/schemas/AggregationProof
type AggregationProof struct {
	VerificationType uint32 `json:"verificationType"`
	MessageHash      []byte `json:"messageHash"`
	Proof            []byte `json:"proof"`
}

// GetVerificationType returns the value of VerificationType.
func (s *AggregationProof) GetVerificationType() uint32 {
	return s.VerificationType
}

// GetMessageHash returns the value of MessageHash.
func (s *AggregationProof) GetMessageHash() []byte {
	return s.MessageHash
}

// GetProof returns the value of Proof.
func (s *AggregationProof) GetProof() []byte {
	return s.Proof
}

// SetVerificationType sets the value of VerificationType.
func (s *AggregationProof) SetVerificationType(val uint32) {
	s.VerificationType = val
}

// SetMessageHash sets the value of MessageHash.
func (s *AggregationProof) SetMessageHash(val []byte) {
	s.MessageHash = val
}

// SetProof sets the value of Proof.
func (s *AggregationProof) SetProof(val []byte) {
	s.Proof = val
}

// Ref: #/components/schemas/AggregationStatus
type AggregationStatus struct {
	// Current voting power of the aggregator.
	CurrentVotingPower string   `json:"currentVotingPower"`
	SignerOperators    []string `json:"signerOperators"`
}

// GetCurrentVotingPower returns the value of CurrentVotingPower.
func (s *AggregationStatus) GetCurrentVotingPower() string {
	return s.CurrentVotingPower
}

// GetSignerOperators returns the value of SignerOperators.
func (s *AggregationStatus) GetSignerOperators() []string {
	return s.SignerOperators
}

// SetCurrentVotingPower sets the value of CurrentVotingPower.
func (s *AggregationStatus) SetCurrentVotingPower(val string) {
	s.CurrentVotingPower = val
}

// SetSignerOperators sets the value of SignerOperators.
func (s *AggregationStatus) SetSignerOperators(val []string) {
	s.SignerOperators = val
}

// Ref: #/components/schemas/Error
type Error struct {
	// User-friendly error message.
	ErrorMessage string         `json:"errorMessage"`
	ErrorCode    ErrorErrorCode `json:"errorCode"`
}

// GetErrorMessage returns the value of ErrorMessage.
func (s *Error) GetErrorMessage() string {
	return s.ErrorMessage
}

// GetErrorCode returns the value of ErrorCode.
func (s *Error) GetErrorCode() ErrorErrorCode {
	return s.ErrorCode
}

// SetErrorMessage sets the value of ErrorMessage.
func (s *Error) SetErrorMessage(val string) {
	s.ErrorMessage = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *Error) SetErrorCode(val ErrorErrorCode) {
	s.ErrorCode = val
}

type ErrorErrorCode string

const (
	ErrorErrorCodeNoData          ErrorErrorCode = "noData"
	ErrorErrorCodeOoops           ErrorErrorCode = "ooops"
	ErrorErrorCodeNotAnAggregator ErrorErrorCode = "notAnAggregator"
)

// AllValues returns all ErrorErrorCode values.
func (ErrorErrorCode) AllValues() []ErrorErrorCode {
	return []ErrorErrorCode{
		ErrorErrorCodeNoData,
		ErrorErrorCodeOoops,
		ErrorErrorCodeNotAnAggregator,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ErrorErrorCode) MarshalText() ([]byte, error) {
	switch s {
	case ErrorErrorCodeNoData:
		return []byte(s), nil
	case ErrorErrorCodeOoops:
		return []byte(s), nil
	case ErrorErrorCodeNotAnAggregator:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ErrorErrorCode) UnmarshalText(data []byte) error {
	switch ErrorErrorCode(data) {
	case ErrorErrorCodeNoData:
		*s = ErrorErrorCodeNoData
		return nil
	case ErrorErrorCodeOoops:
		*s = ErrorErrorCodeOoops
		return nil
	case ErrorErrorCodeNotAnAggregator:
		*s = ErrorErrorCodeNotAnAggregator
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

type GetCurrentEpochGetOK struct {
	Epoch     uint64    `json:"epoch"`
	StartTime time.Time `json:"startTime"`
}

// GetEpoch returns the value of Epoch.
func (s *GetCurrentEpochGetOK) GetEpoch() uint64 {
	return s.Epoch
}

// GetStartTime returns the value of StartTime.
func (s *GetCurrentEpochGetOK) GetStartTime() time.Time {
	return s.StartTime
}

// SetEpoch sets the value of Epoch.
func (s *GetCurrentEpochGetOK) SetEpoch(val uint64) {
	s.Epoch = val
}

// SetStartTime sets the value of StartTime.
func (s *GetCurrentEpochGetOK) SetStartTime(val time.Time) {
	s.StartTime = val
}

type GetSuggestedEpochGetOK struct {
	Epoch     uint64    `json:"epoch"`
	StartTime time.Time `json:"startTime"`
}

// GetEpoch returns the value of Epoch.
func (s *GetSuggestedEpochGetOK) GetEpoch() uint64 {
	return s.Epoch
}

// GetStartTime returns the value of StartTime.
func (s *GetSuggestedEpochGetOK) GetStartTime() time.Time {
	return s.StartTime
}

// SetEpoch sets the value of Epoch.
func (s *GetSuggestedEpochGetOK) SetEpoch(val uint64) {
	s.Epoch = val
}

// SetStartTime sets the value of StartTime.
func (s *GetSuggestedEpochGetOK) SetStartTime(val time.Time) {
	s.StartTime = val
}

// Ref: #/components/schemas/Key
type Key struct {
	Tag     uint8  `json:"tag"`
	Payload []byte `json:"payload"`
}

// GetTag returns the value of Tag.
func (s *Key) GetTag() uint8 {
	return s.Tag
}

// GetPayload returns the value of Payload.
func (s *Key) GetPayload() []byte {
	return s.Payload
}

// SetTag sets the value of Tag.
func (s *Key) SetTag(val uint8) {
	s.Tag = val
}

// SetPayload sets the value of Payload.
func (s *Key) SetPayload(val []byte) {
	s.Payload = val
}

// NewOptUint64 returns new OptUint64 with value set to v.
func NewOptUint64(v uint64) OptUint64 {
	return OptUint64{
		Value: v,
		Set:   true,
	}
}

// OptUint64 is optional uint64.
type OptUint64 struct {
	Value uint64
	Set   bool
}

// IsSet returns true if OptUint64 was set.
func (o OptUint64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUint64) Reset() {
	var v uint64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUint64) SetTo(v uint64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUint64) Get() (v uint64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUint64) Or(d uint64) uint64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type SignMessagePostOK struct {
	RequestHash string `json:"requestHash"`
	Epoch       uint64 `json:"epoch"`
}

// GetRequestHash returns the value of RequestHash.
func (s *SignMessagePostOK) GetRequestHash() string {
	return s.RequestHash
}

// GetEpoch returns the value of Epoch.
func (s *SignMessagePostOK) GetEpoch() uint64 {
	return s.Epoch
}

// SetRequestHash sets the value of RequestHash.
func (s *SignMessagePostOK) SetRequestHash(val string) {
	s.RequestHash = val
}

// SetEpoch sets the value of Epoch.
func (s *SignMessagePostOK) SetEpoch(val uint64) {
	s.Epoch = val
}

type SignMessagePostReq struct {
	KeyTag  uint8  `json:"keyTag"`
	Message []byte `json:"message"`
	// If not provided latest committed epoch will be used.
	RequiredEpoch OptUint64 `json:"requiredEpoch"`
}

// GetKeyTag returns the value of KeyTag.
func (s *SignMessagePostReq) GetKeyTag() uint8 {
	return s.KeyTag
}

// GetMessage returns the value of Message.
func (s *SignMessagePostReq) GetMessage() []byte {
	return s.Message
}

// GetRequiredEpoch returns the value of RequiredEpoch.
func (s *SignMessagePostReq) GetRequiredEpoch() OptUint64 {
	return s.RequiredEpoch
}

// SetKeyTag sets the value of KeyTag.
func (s *SignMessagePostReq) SetKeyTag(val uint8) {
	s.KeyTag = val
}

// SetMessage sets the value of Message.
func (s *SignMessagePostReq) SetMessage(val []byte) {
	s.Message = val
}

// SetRequiredEpoch sets the value of RequiredEpoch.
func (s *SignMessagePostReq) SetRequiredEpoch(val OptUint64) {
	s.RequiredEpoch = val
}

// Ref: #/components/schemas/Signature
type Signature struct {
	Signature   []byte `json:"signature"`
	MessageHash []byte `json:"messageHash"`
	PublicKey   []byte `json:"publicKey"`
}

// GetSignature returns the value of Signature.
func (s *Signature) GetSignature() []byte {
	return s.Signature
}

// GetMessageHash returns the value of MessageHash.
func (s *Signature) GetMessageHash() []byte {
	return s.MessageHash
}

// GetPublicKey returns the value of PublicKey.
func (s *Signature) GetPublicKey() []byte {
	return s.PublicKey
}

// SetSignature sets the value of Signature.
func (s *Signature) SetSignature(val []byte) {
	s.Signature = val
}

// SetMessageHash sets the value of MessageHash.
func (s *Signature) SetMessageHash(val []byte) {
	s.MessageHash = val
}

// SetPublicKey sets the value of PublicKey.
func (s *Signature) SetPublicKey(val []byte) {
	s.PublicKey = val
}

// Ref: #/components/schemas/SignatureRequest
type SignatureRequest struct {
	KeyTag  uint8  `json:"keyTag"`
	Message []byte `json:"message"`
	// If not provided latest committed epoch will be used.
	RequiredEpoch uint64 `json:"requiredEpoch"`
}

// GetKeyTag returns the value of KeyTag.
func (s *SignatureRequest) GetKeyTag() uint8 {
	return s.KeyTag
}

// GetMessage returns the value of Message.
func (s *SignatureRequest) GetMessage() []byte {
	return s.Message
}

// GetRequiredEpoch returns the value of RequiredEpoch.
func (s *SignatureRequest) GetRequiredEpoch() uint64 {
	return s.RequiredEpoch
}

// SetKeyTag sets the value of KeyTag.
func (s *SignatureRequest) SetKeyTag(val uint8) {
	s.KeyTag = val
}

// SetMessage sets the value of Message.
func (s *SignatureRequest) SetMessage(val []byte) {
	s.Message = val
}

// SetRequiredEpoch sets the value of RequiredEpoch.
func (s *SignatureRequest) SetRequiredEpoch(val uint64) {
	s.RequiredEpoch = val
}

// Ref: #/components/schemas/Validator
type Validator struct {
	// Operator address hex.
	Operator string `json:"operator"`
	// Voting power of the validator.
	VotingPower string `json:"votingPower"`
	// Indicates if the validator is active.
	IsActive bool             `json:"isActive"`
	Keys     []Key            `json:"keys"`
	Vaults   []ValidatorVault `json:"vaults"`
}

// GetOperator returns the value of Operator.
func (s *Validator) GetOperator() string {
	return s.Operator
}

// GetVotingPower returns the value of VotingPower.
func (s *Validator) GetVotingPower() string {
	return s.VotingPower
}

// GetIsActive returns the value of IsActive.
func (s *Validator) GetIsActive() bool {
	return s.IsActive
}

// GetKeys returns the value of Keys.
func (s *Validator) GetKeys() []Key {
	return s.Keys
}

// GetVaults returns the value of Vaults.
func (s *Validator) GetVaults() []ValidatorVault {
	return s.Vaults
}

// SetOperator sets the value of Operator.
func (s *Validator) SetOperator(val string) {
	s.Operator = val
}

// SetVotingPower sets the value of VotingPower.
func (s *Validator) SetVotingPower(val string) {
	s.VotingPower = val
}

// SetIsActive sets the value of IsActive.
func (s *Validator) SetIsActive(val bool) {
	s.IsActive = val
}

// SetKeys sets the value of Keys.
func (s *Validator) SetKeys(val []Key) {
	s.Keys = val
}

// SetVaults sets the value of Vaults.
func (s *Validator) SetVaults(val []ValidatorVault) {
	s.Vaults = val
}

// Ref: #/components/schemas/ValidatorSet
type ValidatorSet struct {
	Version uint8 `json:"version"`
	// Key tag required to commit next valset.
	RequiredKeyTag uint8 `json:"requiredKeyTag"`
	// Valset epoch.
	Epoch uint64 `json:"epoch"`
	// Epoch capture timestamp.
	CaptureTimestamp time.Time `json:"captureTimestamp"`
	QuorumThreshold  string    `json:"quorumThreshold"`
	// Previous valset header hash hex.
	PreviousHeaderHash string `json:"previousHeaderHash"`
	// Status of validator set header (0 - pending, 1 - missed, 2 - committed).
	Status     uint8       `json:"status"`
	Validators []Validator `json:"validators"`
}

// GetVersion returns the value of Version.
func (s *ValidatorSet) GetVersion() uint8 {
	return s.Version
}

// GetRequiredKeyTag returns the value of RequiredKeyTag.
func (s *ValidatorSet) GetRequiredKeyTag() uint8 {
	return s.RequiredKeyTag
}

// GetEpoch returns the value of Epoch.
func (s *ValidatorSet) GetEpoch() uint64 {
	return s.Epoch
}

// GetCaptureTimestamp returns the value of CaptureTimestamp.
func (s *ValidatorSet) GetCaptureTimestamp() time.Time {
	return s.CaptureTimestamp
}

// GetQuorumThreshold returns the value of QuorumThreshold.
func (s *ValidatorSet) GetQuorumThreshold() string {
	return s.QuorumThreshold
}

// GetPreviousHeaderHash returns the value of PreviousHeaderHash.
func (s *ValidatorSet) GetPreviousHeaderHash() string {
	return s.PreviousHeaderHash
}

// GetStatus returns the value of Status.
func (s *ValidatorSet) GetStatus() uint8 {
	return s.Status
}

// GetValidators returns the value of Validators.
func (s *ValidatorSet) GetValidators() []Validator {
	return s.Validators
}

// SetVersion sets the value of Version.
func (s *ValidatorSet) SetVersion(val uint8) {
	s.Version = val
}

// SetRequiredKeyTag sets the value of RequiredKeyTag.
func (s *ValidatorSet) SetRequiredKeyTag(val uint8) {
	s.RequiredKeyTag = val
}

// SetEpoch sets the value of Epoch.
func (s *ValidatorSet) SetEpoch(val uint64) {
	s.Epoch = val
}

// SetCaptureTimestamp sets the value of CaptureTimestamp.
func (s *ValidatorSet) SetCaptureTimestamp(val time.Time) {
	s.CaptureTimestamp = val
}

// SetQuorumThreshold sets the value of QuorumThreshold.
func (s *ValidatorSet) SetQuorumThreshold(val string) {
	s.QuorumThreshold = val
}

// SetPreviousHeaderHash sets the value of PreviousHeaderHash.
func (s *ValidatorSet) SetPreviousHeaderHash(val string) {
	s.PreviousHeaderHash = val
}

// SetStatus sets the value of Status.
func (s *ValidatorSet) SetStatus(val uint8) {
	s.Status = val
}

// SetValidators sets the value of Validators.
func (s *ValidatorSet) SetValidators(val []Validator) {
	s.Validators = val
}

// Ref: #/components/schemas/ValidatorVault
type ValidatorVault struct {
	ChainId     uint64 `json:"chainId"`
	Vault       string `json:"vault"`
	VotingPower string `json:"votingPower"`
}

// GetChainId returns the value of ChainId.
func (s *ValidatorVault) GetChainId() uint64 {
	return s.ChainId
}

// GetVault returns the value of Vault.
func (s *ValidatorVault) GetVault() string {
	return s.Vault
}

// GetVotingPower returns the value of VotingPower.
func (s *ValidatorVault) GetVotingPower() string {
	return s.VotingPower
}

// SetChainId sets the value of ChainId.
func (s *ValidatorVault) SetChainId(val uint64) {
	s.ChainId = val
}

// SetVault sets the value of Vault.
func (s *ValidatorVault) SetVault(val string) {
	s.Vault = val
}

// SetVotingPower sets the value of VotingPower.
func (s *ValidatorVault) SetVotingPower(val string) {
	s.VotingPower = val
}
