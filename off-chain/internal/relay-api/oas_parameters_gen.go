// Code generated by ogen, DO NOT EDIT.

package relay_api

import (
	"net/http"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
)

// GetAggregationProofGetParams is parameters of GET /getAggregationProof operation.
type GetAggregationProofGetParams struct {
	RequestHash string
}

func unpackGetAggregationProofGetParams(packed middleware.Parameters) (params GetAggregationProofGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "requestHash",
			In:   "query",
		}
		params.RequestHash = packed[key].(string)
	}
	return params
}

func decodeGetAggregationProofGetParams(args [0]string, argsEscaped bool, r *http.Request) (params GetAggregationProofGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: requestHash.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "requestHash",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RequestHash = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "requestHash",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetAggregationStatusGetParams is parameters of GET /getAggregationStatus operation.
type GetAggregationStatusGetParams struct {
	RequestHash string
}

func unpackGetAggregationStatusGetParams(packed middleware.Parameters) (params GetAggregationStatusGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "requestHash",
			In:   "query",
		}
		params.RequestHash = packed[key].(string)
	}
	return params
}

func decodeGetAggregationStatusGetParams(args [0]string, argsEscaped bool, r *http.Request) (params GetAggregationStatusGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: requestHash.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "requestHash",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RequestHash = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "requestHash",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetSignatureRequestGetParams is parameters of GET /getSignatureRequest operation.
type GetSignatureRequestGetParams struct {
	RequestHash string
}

func unpackGetSignatureRequestGetParams(packed middleware.Parameters) (params GetSignatureRequestGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "requestHash",
			In:   "query",
		}
		params.RequestHash = packed[key].(string)
	}
	return params
}

func decodeGetSignatureRequestGetParams(args [0]string, argsEscaped bool, r *http.Request) (params GetSignatureRequestGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: requestHash.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "requestHash",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RequestHash = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "requestHash",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetSignaturesGetParams is parameters of GET /getSignatures operation.
type GetSignaturesGetParams struct {
	RequestHash string
}

func unpackGetSignaturesGetParams(packed middleware.Parameters) (params GetSignaturesGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "requestHash",
			In:   "query",
		}
		params.RequestHash = packed[key].(string)
	}
	return params
}

func decodeGetSignaturesGetParams(args [0]string, argsEscaped bool, r *http.Request) (params GetSignaturesGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: requestHash.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "requestHash",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RequestHash = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "requestHash",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetValidatorSetGetParams is parameters of GET /getValidatorSet operation.
type GetValidatorSetGetParams struct {
	// If not provided, the current epoch will be used.
	Epoch OptUint64
}

func unpackGetValidatorSetGetParams(packed middleware.Parameters) (params GetValidatorSetGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "epoch",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Epoch = v.(OptUint64)
		}
	}
	return params
}

func decodeGetValidatorSetGetParams(args [0]string, argsEscaped bool, r *http.Request) (params GetValidatorSetGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: epoch.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "epoch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotEpochVal uint64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUint64(val)
					if err != nil {
						return err
					}

					paramsDotEpochVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Epoch.SetTo(paramsDotEpochVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "epoch",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
